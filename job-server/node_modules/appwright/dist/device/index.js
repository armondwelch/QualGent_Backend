"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = void 0;
const locator_1 = require("../locator");
const types_1 = require("../types");
const vision_1 = require("../vision");
const utils_1 = require("../utils");
let Device = (() => {
    let _instanceExtraInitializers = [];
    let _close_decorators;
    let _tap_decorators;
    return class Device {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _close_decorators = [utils_1.boxedStep];
            _tap_decorators = [utils_1.boxedStep];
            __esDecorate(this, null, _close_decorators, { kind: "method", name: "close", static: false, private: false, access: { has: obj => "close" in obj, get: obj => obj.close }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _tap_decorators, { kind: "method", name: "tap", static: false, private: false, access: { has: obj => "tap" in obj, get: obj => obj.tap }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        webdriverClient = __runInitializers(this, _instanceExtraInitializers);
        bundleId;
        testOptions;
        constructor(webdriverClient, bundleId, testOptions) {
            this.webdriverClient = webdriverClient;
            this.bundleId = bundleId;
            this.testOptions = testOptions;
        }
        locator(path, findStrategy, textToMatch) {
            return new locator_1.Locator(this.webdriverClient, path, findStrategy, this.testOptions, textToMatch);
        }
        vision() {
            return new vision_1.VisionProvider(this, this.webdriverClient);
        }
        beta = {
            tap: async (prompt) => {
                await this.vision().tap(prompt);
            },
            extractText: async (prompt) => {
                return await this.vision().extractText(prompt);
            },
        };
        async close() {
            await this.webdriverClient.deleteSession();
        }
        async tap({ x, y }) {
            if (this.getPlatform() == types_1.Platform.ANDROID) {
                await this.webdriverClient.executeScript("mobile: clickGesture", [
                    {
                        x: x,
                        y: y,
                        duration: 100,
                        tapCount: 1,
                    },
                ]);
            }
            else {
                await this.webdriverClient.executeScript("mobile: tap", [
                    {
                        x: x,
                        y: y,
                    },
                ]);
            }
        }
        getByText(text, { exact = false } = {}) {
            const isAndroid = this.getPlatform() == types_1.Platform.ANDROID;
            if (text instanceof RegExp) {
                return this.locator(text, isAndroid ? "-android uiautomator" : "-ios predicate string");
            }
            let path;
            if (isAndroid) {
                path = exact ? `text("${text}")` : `textContains("${text}")`;
            }
            else {
                path = exact ? `label == "${text}"` : `label CONTAINS "${text}"`;
            }
            return this.locator(path, isAndroid ? "-android uiautomator" : "-ios predicate string", text);
        }
        getById(text, { exact = false } = {}) {
            const isAndroid = this.getPlatform() == types_1.Platform.ANDROID;
            if (text instanceof RegExp) {
                return this.locator(text, isAndroid ? "-android uiautomator" : "-ios predicate string");
            }
            let path;
            if (isAndroid) {
                path = exact ? `resourceId("${text}")` : `resourceIdMatches("${text}")`;
            }
            else {
                path = exact ? `name == "${text}"` : `name CONTAINS "${text}"`;
            }
            return this.locator(path, isAndroid ? "-android uiautomator" : "-ios predicate string", text);
        }
        getByXpath(xpath) {
            return this.locator(xpath, "xpath");
        }
        getPlatform() {
            const isAndroid = this.webdriverClient.isAndroid;
            return isAndroid ? types_1.Platform.ANDROID : types_1.Platform.IOS;
        }
        async getClipboardText() {
            if (this.getPlatform() == types_1.Platform.ANDROID) {
                return await this.webdriverClient.getClipboard();
            }
            else {
                await this.webdriverClient.executeScript("mobile: activateApp", [
                    {
                        bundleId: "com.facebook.WebDriverAgentRunner.xctrunner",
                    },
                ]);
                const clipboardDataBase64 = await this.webdriverClient.getClipboard();
                await this.webdriverClient.executeScript("mobile: activateApp", [
                    {
                        bundleId: this.bundleId,
                    },
                ]);
                return clipboardDataBase64;
            }
        }
    };
})();
exports.Device = Device;
